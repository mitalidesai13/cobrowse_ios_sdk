// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BlitzzCobrowseSDK
import AVFoundation
@_exported import BlitzzCobrowseSDK
import CoreVideo
import Foundation
import ReplayKit
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class CoBrowseConfig : @unchecked Swift.Sendable {
  public init(licenseKey: Swift.String, autoInitiate: Swift.Bool = true, reference: Swift.String)
  @objc deinit
}
final public class BlitzzCobrowse {
  public init(config: BlitzzCobrowseSDK.CoBrowseConfig)
  public static func initializeShared(config: BlitzzCobrowseSDK.CoBrowseConfig)
  public static var shared: BlitzzCobrowseSDK.BlitzzCobrowse {
    get
  }
  @_Concurrency.MainActor final public func start()
  @_Concurrency.MainActor final public func getCode()
  @objc deinit
}
public protocol Connection {
  var delegate: (any BlitzzCobrowseSDK.ConnectionDelegate)? { get set }
  var inherentKeepAlive: Swift.Bool { get }
  var connectionId: Swift.String? { get }
  func start()
  func send(data: Foundation.Data, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  func stop(stopError: (any Swift.Error)?)
}
public protocol ConnectionDelegate : AnyObject {
  func connectionDidOpen(connection: any BlitzzCobrowseSDK.Connection)
  func connectionDidFailToOpen(error: any Swift.Error)
  func connectionDidReceiveData(connection: any BlitzzCobrowseSDK.Connection, data: Foundation.Data)
  func connectionDidClose(error: (any Swift.Error)?)
  func connectionWillReconnect(error: any Swift.Error)
  func connectionDidReconnect()
}
extension BlitzzCobrowseSDK.ConnectionDelegate {
  public func connectionWillReconnect(error: any Swift.Error)
  public func connectionDidReconnect()
}
public protocol HttpClientProtocol {
  func get(url: Foundation.URL, completionHandler: @escaping (BlitzzCobrowseSDK.HttpResponse?, (any Swift.Error)?) -> Swift.Void)
  func post(url: Foundation.URL, body: Foundation.Data?, completionHandler: @escaping (BlitzzCobrowseSDK.HttpResponse?, (any Swift.Error)?) -> Swift.Void)
  func delete(url: Foundation.URL, completionHandler: @escaping (BlitzzCobrowseSDK.HttpResponse?, (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class HttpConnection : BlitzzCobrowseSDK.Connection {
  weak public var delegate: (any BlitzzCobrowseSDK.ConnectionDelegate)?
  public var connectionId: Swift.String? {
    get
  }
  public var inherentKeepAlive: Swift.Bool {
    get
  }
  convenience public init(url: Foundation.URL, options: BlitzzCobrowseSDK.HttpConnectionOptions = HttpConnectionOptions(), logger: any BlitzzCobrowseSDK.Logger = NullLogger())
  @objc deinit
  public func start()
  public func send(data: Foundation.Data, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func stop(stopError: (any Swift.Error)? = nil)
}
@_hasMissingDesignatedInitializers public class ConnectionTransportDelegate : BlitzzCobrowseSDK.TransportDelegate {
  public func transportDidOpen()
  public func transportDidReceiveData(_ data: Foundation.Data)
  public func transportDidClose(_ error: (any Swift.Error)?)
  @objc deinit
}
public class HttpConnectionOptions {
  public var headers: [Swift.String : Swift.String]
  public var accessTokenProvider: () -> Swift.String?
  public var httpClientFactory: (BlitzzCobrowseSDK.HttpConnectionOptions) -> any BlitzzCobrowseSDK.HttpClientProtocol
  public var skipNegotiation: Swift.Bool {
    get
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    set
  }
  public var requestTimeout: Swift.Double
  public var maximumWebsocketMessageSize: Swift.Int?
  public var authenticationChallengeHandler: ((_ session: Foundation.URLSession, _ challenge: Foundation.URLAuthenticationChallenge, _ completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  public var callbackQueue: Dispatch.DispatchQueue
  public init()
  @objc deinit
}
public class HttpResponse {
  public init(statusCode: Swift.Int, contents: Foundation.Data?)
  @objc deinit
}
public class HubConnection {
  weak public var delegate: (any BlitzzCobrowseSDK.HubConnectionDelegate)?
  public var connectionId: Swift.String? {
    get
  }
  convenience public init(connection: any BlitzzCobrowseSDK.Connection, hubProtocol: any BlitzzCobrowseSDK.HubProtocol, logger: any BlitzzCobrowseSDK.Logger = NullLogger())
  public init(connection: any BlitzzCobrowseSDK.Connection, hubProtocol: any BlitzzCobrowseSDK.HubProtocol, hubConnectionOptions: BlitzzCobrowseSDK.HubConnectionOptions, logger: any BlitzzCobrowseSDK.Logger = NullLogger())
  @objc deinit
  public func start()
  public func stop()
  public func on(method: Swift.String, callback: @escaping (_ argumentExtractor: BlitzzCobrowseSDK.ArgumentExtractor) throws -> Swift.Void)
  public func send(method: Swift.String, arguments: [any Swift.Encodable], sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, arguments: [any Swift.Encodable], invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke<T>(method: Swift.String, arguments: [any Swift.Encodable], resultType: T.Type, invocationDidComplete: @escaping (_ result: T?, _ error: (any Swift.Error)?) -> Swift.Void) where T : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke(method: Swift.String, arguments: [any Swift.Encodable], clientStreams: [_Concurrency.AsyncStream<any Swift.Encodable>], invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke<T>(method: Swift.String, arguments: [any Swift.Encodable], clientStreams: [_Concurrency.AsyncStream<any Swift.Encodable>], resultType: T.Type, invocationDidComplete: @escaping (_ result: T?, _ error: (any Swift.Error)?) -> Swift.Void) where T : Swift.Decodable
  public func stream<T>(method: Swift.String, arguments: [any Swift.Encodable], streamItemReceived: @escaping (_ item: T) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where T : Swift.Decodable
  public func cancelStreamInvocation(streamHandle: BlitzzCobrowseSDK.StreamHandle, cancelDidFail: @escaping (_ error: any Swift.Error) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func stream<T>(method: Swift.String, arguments: [any Swift.Encodable], clientStreams: [_Concurrency.AsyncStream<any Swift.Encodable>], streamItemReceived: @escaping (_ item: T) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where T : Swift.Decodable
}
@_hasMissingDesignatedInitializers public class ArgumentExtractor {
  public func getArgument<T>(type: T.Type) throws -> T where T : Swift.Decodable
  public func hasMoreArgs() -> Swift.Bool
  @objc deinit
}
public class HubConnectionBuilder {
  public init(url: Foundation.URL)
  public func withHubProtocol(hubProtocolFactory: @escaping (any BlitzzCobrowseSDK.Logger) -> any BlitzzCobrowseSDK.HubProtocol) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withHttpConnectionOptions(configureHttpOptions: (_ httpConnectionOptions: BlitzzCobrowseSDK.HttpConnectionOptions) -> Swift.Void) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withHubConnectionOptions(configureHubConnectionOptions: (_ hubConnectionOptions: BlitzzCobrowseSDK.HubConnectionOptions) -> Swift.Void) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withLogging(minLogLevel: BlitzzCobrowseSDK.LogLevel) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withLogging(logger: any BlitzzCobrowseSDK.Logger) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withLogging(minLogLevel: BlitzzCobrowseSDK.LogLevel, logger: any BlitzzCobrowseSDK.Logger) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withHubConnectionDelegate(delegate: any BlitzzCobrowseSDK.HubConnectionDelegate) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withAutoReconnect(reconnectPolicy: any BlitzzCobrowseSDK.ReconnectPolicy = DefaultReconnectPolicy()) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func withPermittedTransportTypes(_ permittedTransportTypes: BlitzzCobrowseSDK.TransportType) -> BlitzzCobrowseSDK.HubConnectionBuilder
  public func build() -> BlitzzCobrowseSDK.HubConnection
  @objc deinit
}
extension BlitzzCobrowseSDK.HubConnectionBuilder {
  public func withJSONHubProtocol() -> BlitzzCobrowseSDK.HubConnectionBuilder
}
public protocol HubConnectionDelegate : AnyObject {
  func connectionDidOpen(hubConnection: BlitzzCobrowseSDK.HubConnection)
  func connectionDidFailToOpen(error: any Swift.Error)
  func connectionDidClose(error: (any Swift.Error)?)
  func connectionWillReconnect(error: any Swift.Error)
  func connectionDidReconnect()
}
extension BlitzzCobrowseSDK.HubConnectionDelegate {
  public func connectionWillReconnect(error: any Swift.Error)
  public func connectionDidReconnect()
}
extension BlitzzCobrowseSDK.HubConnection {
  public func invoke(method: Swift.String, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, _ arg8: any Swift.Encodable, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke(method: Swift.String, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func invoke<TRes>(method: Swift.String, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, _ arg8: any Swift.Encodable, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke<TRes>(method: Swift.String, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func invoke<TRes>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, resultType: TRes.Type, invocationDidComplete: @escaping (_ result: TRes?, _ error: (any Swift.Error)?) -> Swift.Void) where TRes : Swift.Decodable
  public func send(method: Swift.String, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func send(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, _ arg8: any Swift.Encodable, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void = { _ in })
  public func on(method: Swift.String, callback: @escaping () -> Swift.Void)
  public func on<T1>(method: Swift.String, callback: @escaping (_ arg1: T1) -> Swift.Void) where T1 : Swift.Decodable
  public func on<T1, T2>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable
  public func on<T1, T2, T3>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable
  public func on<T1, T2, T3, T4>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6, T7>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable, T7 : Swift.Decodable
  public func on<T1, T2, T3, T4, T5, T6, T7, T8>(method: Swift.String, callback: @escaping (_ arg1: T1, _ arg2: T2, _ arg3: T3, _ arg4: T4, _ arg5: T5, _ arg6: T6, _ arg7: T7, _ arg8: T8) -> Swift.Void) where T1 : Swift.Decodable, T2 : Swift.Decodable, T3 : Swift.Decodable, T4 : Swift.Decodable, T5 : Swift.Decodable, T6 : Swift.Decodable, T7 : Swift.Decodable, T8 : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, _ arg5: any Swift.Encodable, _ arg6: any Swift.Encodable, _ arg7: any Swift.Encodable, _ arg8: any Swift.Encodable, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func stream<TItemType>(method: Swift.String, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  public func stream<TItemType>(method: Swift.String, _ arg1: any Swift.Encodable, _ arg2: any Swift.Encodable, _ arg3: any Swift.Encodable, _ arg4: any Swift.Encodable, clientStream: _Concurrency.AsyncStream<any Swift.Encodable>, streamItemReceived: @escaping (_ item: TItemType) -> Swift.Void, invocationDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void) -> BlitzzCobrowseSDK.StreamHandle where TItemType : Swift.Decodable
}
public class HubConnectionOptions {
  public var keepAliveInterval: Swift.Double?
  public var callbackQueue: Dispatch.DispatchQueue
  public init()
  @objc deinit
}
public enum ProtocolType : Swift.Int {
  case Text
  case Binary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol HubProtocol {
  var name: Swift.String { get }
  var version: Swift.Int { get }
  var type: BlitzzCobrowseSDK.ProtocolType { get }
  func parseMessages(input: Foundation.Data) throws -> [any BlitzzCobrowseSDK.HubMessage]
  func writeMessage(message: any BlitzzCobrowseSDK.HubMessage) throws -> Foundation.Data
}
public enum MessageType : Swift.Int, Swift.Codable {
  case Invocation
  case StreamItem
  case Completion
  case StreamInvocation
  case CancelInvocation
  case Ping
  case Close
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol HubMessage {
  var type: BlitzzCobrowseSDK.MessageType { get }
}
@_hasMissingDesignatedInitializers public class ServerInvocationMessage : BlitzzCobrowseSDK.HubMessage, Swift.Encodable {
  final public let type: BlitzzCobrowseSDK.MessageType
  final public let invocationId: Swift.String?
  final public let target: Swift.String
  final public let arguments: [any Swift.Encodable]
  final public let streamIds: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class ClientInvocationMessage : BlitzzCobrowseSDK.HubMessage, Swift.Decodable {
  final public let type: BlitzzCobrowseSDK.MessageType
  final public let target: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public func getArgument<T>(type: T.Type) throws -> T where T : Swift.Decodable
  @objc deinit
}
public class StreamItemMessage : BlitzzCobrowseSDK.HubMessage, Swift.Codable {
  final public let type: BlitzzCobrowseSDK.MessageType
  final public let invocationId: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public init(invocationId: Swift.String, item: any Swift.Encodable)
  public func getItem<T>(_ type: T.Type) throws -> T where T : Swift.Decodable
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class CompletionMessage : BlitzzCobrowseSDK.HubMessage, Swift.Codable {
  final public let type: BlitzzCobrowseSDK.MessageType
  final public let invocationId: Swift.String
  final public let error: Swift.String?
  final public let hasResult: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  public init(invocationId: Swift.String, error: Swift.String?)
  public func getResult<T>(_ type: T.Type) throws -> T? where T : Swift.Decodable
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamInvocationMessage : BlitzzCobrowseSDK.HubMessage, Swift.Encodable {
  final public let type: BlitzzCobrowseSDK.MessageType
  final public let invocationId: Swift.String
  final public let target: Swift.String
  final public let arguments: [any Swift.Encodable]
  final public let streamIds: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CancelInvocationMessage : BlitzzCobrowseSDK.HubMessage, Swift.Encodable {
  final public let type: BlitzzCobrowseSDK.MessageType
  final public let invocationId: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class PingMessage : BlitzzCobrowseSDK.HubMessage, Swift.Encodable {
  final public let type: BlitzzCobrowseSDK.MessageType
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CloseMessage : BlitzzCobrowseSDK.HubMessage, Swift.Decodable {
  public var type: BlitzzCobrowseSDK.MessageType {
    get
  }
  final public let error: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class JSONHubProtocol : BlitzzCobrowseSDK.HubProtocol {
  final public let name: Swift.String
  final public let version: Swift.Int
  final public let type: BlitzzCobrowseSDK.ProtocolType
  public init(logger: any BlitzzCobrowseSDK.Logger, encoder: Foundation.JSONEncoder = JSONEncoder(), decoder: Foundation.JSONDecoder = JSONDecoder())
  public func parseMessages(input: Foundation.Data) throws -> [any BlitzzCobrowseSDK.HubMessage]
  public func createHubMessage(payload: Foundation.Data) throws -> any BlitzzCobrowseSDK.HubMessage
  public func writeMessage(message: any BlitzzCobrowseSDK.HubMessage) throws -> Foundation.Data
  @objc deinit
}
public enum LogLevel : Swift.Int {
  case error
  case warning
  case info
  case debug
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Logger {
  func log(logLevel: BlitzzCobrowseSDK.LogLevel, message: @autoclosure () -> Swift.String)
}
extension BlitzzCobrowseSDK.LogLevel {
  public func toString() -> Swift.String
}
public class PrintLogger : BlitzzCobrowseSDK.Logger {
  public init()
  public func log(logLevel: BlitzzCobrowseSDK.LogLevel, message: @autoclosure () -> Swift.String)
  @objc deinit
}
public class NullLogger : BlitzzCobrowseSDK.Logger {
  public init()
  public func log(logLevel: BlitzzCobrowseSDK.LogLevel, message: @autoclosure () -> Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongPollingTransport : BlitzzCobrowseSDK.Transport {
  public var delegate: (any BlitzzCobrowseSDK.TransportDelegate)?
  final public let inherentKeepAlive: Swift.Bool
  public func start(url: Foundation.URL, options: BlitzzCobrowseSDK.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func close()
  @objc deinit
}
public struct RetryContext {
  public let failedAttemptsCount: Swift.Int
  public let reconnectStartTime: Foundation.Date
  public let error: any Swift.Error
}
public protocol ReconnectPolicy {
  func nextAttemptInterval(retryContext: BlitzzCobrowseSDK.RetryContext) -> Dispatch.DispatchTimeInterval
}
public class DefaultReconnectPolicy : BlitzzCobrowseSDK.ReconnectPolicy {
  public init(retryIntervals: [Dispatch.DispatchTimeInterval] = [.milliseconds(0), .seconds(2), .seconds(10), .seconds(30)])
  public func nextAttemptInterval(retryContext: BlitzzCobrowseSDK.RetryContext) -> Dispatch.DispatchTimeInterval
  @objc deinit
}
public class InfiniteReconnectPolicy : BlitzzCobrowseSDK.ReconnectPolicy {
  public init(retryIntervals: [Dispatch.DispatchTimeInterval] = [.milliseconds(0), .seconds(2), .seconds(10), .seconds(15)])
  public func nextAttemptInterval(retryContext: BlitzzCobrowseSDK.RetryContext) -> Dispatch.DispatchTimeInterval
  @objc deinit
}
public enum SignalRError : Swift.Error {
  case invalidState
  case webError(statusCode: Swift.Int)
  case hubInvocationError(message: Swift.String)
  case hubInvocationCancelled
  case unknownMessageType
  case invalidMessage
  case unsupportedType
  case serializationError(underlyingError: any Swift.Error)
  case connectionIsBeingClosed
  case invalidOperation(message: Swift.String)
  case protocolViolation(underlyingError: any Swift.Error)
  case handshakeError(message: Swift.String)
  case invalidNegotiationResponse(message: Swift.String)
  case serverClose(message: Swift.String?)
  case noSupportedTransportAvailable
  case connectionIsReconnecting
}
@_hasMissingDesignatedInitializers public class StreamHandle {
  @objc deinit
}
public enum TransferFormat : Swift.String {
  case text
  case binary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Transport : AnyObject {
  var delegate: (any BlitzzCobrowseSDK.TransportDelegate)? { get set }
  var inherentKeepAlive: Swift.Bool { get }
  func start(url: Foundation.URL, options: BlitzzCobrowseSDK.HttpConnectionOptions)
  func send(data: Foundation.Data, sendDidComplete: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  func close()
}
public protocol TransportDelegate : AnyObject {
  func transportDidOpen()
  func transportDidReceiveData(_ data: Foundation.Data)
  func transportDidClose(_ error: (any Swift.Error)?)
}
public struct TransportType : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let longPolling: BlitzzCobrowseSDK.TransportType
  public static let webSockets: BlitzzCobrowseSDK.TransportType
  public static let all: BlitzzCobrowseSDK.TransportType
  public typealias ArrayLiteralElement = BlitzzCobrowseSDK.TransportType
  public typealias Element = BlitzzCobrowseSDK.TransportType
  public typealias RawValue = Swift.Int
}
@objc @_hasMissingDesignatedInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class WebsocketsTransport : ObjectiveC.NSObject, BlitzzCobrowseSDK.Transport, Foundation.URLSessionWebSocketDelegate {
  public var delegate: (any BlitzzCobrowseSDK.TransportDelegate)?
  final public let inherentKeepAlive: Swift.Bool
  public func start(url: Foundation.URL, options: BlitzzCobrowseSDK.HttpConnectionOptions)
  public func send(data: Foundation.Data, sendDidComplete: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func close()
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping @Sendable (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc deinit
}
final public class CodableCBORDecoder {
  final public var useStringKeys: Swift.Bool
  final public var dateStrategy: BlitzzCobrowseSDK.DateStrategy
  public init()
  final public var userInfo: [Swift.CodingUserInfoKey : Any]
  final public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  final public func decode<T>(_ type: T.Type, from data: Swift.ArraySlice<Swift.UInt8>) throws -> T where T : Swift.Decodable
  @objc deinit
}
public class CodableCBOREncoder {
  public var useStringKeys: Swift.Bool
  public var dateStrategy: BlitzzCobrowseSDK.DateStrategy
  public var forbidNonStringMapKeys: Swift.Bool
  public init()
  public func encode(_ value: any Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
indirect public enum CBOR : Swift.Equatable, Swift.Hashable, Swift.ExpressibleByNilLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByFloatLiteral {
  case unsignedInt(Swift.UInt64)
  case negativeInt(Swift.UInt64)
  case byteString([Swift.UInt8])
  case utf8String(Swift.String)
  case array([BlitzzCobrowseSDK.CBOR])
  case map([BlitzzCobrowseSDK.CBOR : BlitzzCobrowseSDK.CBOR])
  case tagged(BlitzzCobrowseSDK.CBOR.Tag, BlitzzCobrowseSDK.CBOR)
  case simple(Swift.UInt8)
  case boolean(Swift.Bool)
  case null
  case undefined
  case half(Swift.Float32)
  case float(Swift.Float32)
  case double(Swift.Float64)
  case `break`
  case date(Foundation.Date)
  public func hash(into hasher: inout Swift.Hasher)
  public subscript(position: BlitzzCobrowseSDK.CBOR) -> BlitzzCobrowseSDK.CBOR? {
    get
    set(x)
  }
  public init(nilLiteral: ())
  public init(integerLiteral value: Swift.Int)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: BlitzzCobrowseSDK.CBOR...)
  public init(dictionaryLiteral elements: (BlitzzCobrowseSDK.CBOR, BlitzzCobrowseSDK.CBOR)...)
  public init(booleanLiteral value: Swift.Bool)
  public init(floatLiteral value: Swift.Float32)
  public static func == (lhs: BlitzzCobrowseSDK.CBOR, rhs: BlitzzCobrowseSDK.CBOR) -> Swift.Bool
  public struct Tag : Swift.RawRepresentable, Swift.Hashable, Swift.Sendable {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public var hashValue: Swift.Int {
      get
    }
    public typealias RawValue = Swift.UInt64
  }
  public typealias ArrayLiteralElement = BlitzzCobrowseSDK.CBOR
  public typealias BooleanLiteralType = Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias FloatLiteralType = Swift.Float32
  public typealias IntegerLiteralType = Swift.Int
  public typealias Key = BlitzzCobrowseSDK.CBOR
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public typealias Value = BlitzzCobrowseSDK.CBOR
  public var hashValue: Swift.Int {
    get
  }
}
extension BlitzzCobrowseSDK.CBOR.Tag {
  public static let standardDateTimeString: BlitzzCobrowseSDK.CBOR.Tag
  public static let epochBasedDateTime: BlitzzCobrowseSDK.CBOR.Tag
  public static let positiveBignum: BlitzzCobrowseSDK.CBOR.Tag
  public static let negativeBignum: BlitzzCobrowseSDK.CBOR.Tag
  public static let decimalFraction: BlitzzCobrowseSDK.CBOR.Tag
  public static let bigfloat: BlitzzCobrowseSDK.CBOR.Tag
  public static let expectedConversionToBase64URLEncoding: BlitzzCobrowseSDK.CBOR.Tag
  public static let expectedConversionToBase64Encoding: BlitzzCobrowseSDK.CBOR.Tag
  public static let expectedConversionToBase16Encoding: BlitzzCobrowseSDK.CBOR.Tag
  public static let encodedCBORDataItem: BlitzzCobrowseSDK.CBOR.Tag
  public static let uri: BlitzzCobrowseSDK.CBOR.Tag
  public static let base64Url: BlitzzCobrowseSDK.CBOR.Tag
  public static let base64: BlitzzCobrowseSDK.CBOR.Tag
  public static let regularExpression: BlitzzCobrowseSDK.CBOR.Tag
  public static let mimeMessage: BlitzzCobrowseSDK.CBOR.Tag
  public static let uuid: BlitzzCobrowseSDK.CBOR.Tag
  public static let selfDescribeCBOR: BlitzzCobrowseSDK.CBOR.Tag
}
public enum CBORError : Swift.Error {
  case unfinishedSequence
  case wrongTypeInsideSequence
  case tooLongSequence
  case incorrectUTF8String
  case maximumDepthExceeded
  public static func == (a: BlitzzCobrowseSDK.CBORError, b: BlitzzCobrowseSDK.CBORError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BlitzzCobrowseSDK.CBOR {
  public static func decode(_ input: [Swift.UInt8], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) throws -> BlitzzCobrowseSDK.CBOR?
}
public class CBORDecoder {
  public var options: BlitzzCobrowseSDK.CBOROptions
  public init(stream: any BlitzzCobrowseSDK.CBORInputStream, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions())
  public init(input: Swift.ArraySlice<Swift.UInt8>, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions())
  public init(input: [Swift.UInt8], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions())
  public func decodeItem() throws -> BlitzzCobrowseSDK.CBOR?
  @objc deinit
}
public protocol CBOREncodable {
  func encode(options: BlitzzCobrowseSDK.CBOROptions) -> [Swift.UInt8]
  func toCBOR(options: BlitzzCobrowseSDK.CBOROptions) -> BlitzzCobrowseSDK.CBOR
}
extension BlitzzCobrowseSDK.CBOR : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Int : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Int8 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Int16 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Int32 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Int64 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.UInt : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.UInt8 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.UInt16 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.UInt32 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.UInt64 : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.String : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Float : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Double : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Bool : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Array where Element : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Swift.Dictionary where Key : BlitzzCobrowseSDK.CBOREncodable, Value : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional where Wrapped : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
#else
extension Swift.Optional where Wrapped : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
#endif
extension Foundation.NSNull : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Foundation.Date : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension Foundation.Data : BlitzzCobrowseSDK.CBOREncodable {
  public func encode(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public func toCBOR(options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> BlitzzCobrowseSDK.CBOR
}
extension BlitzzCobrowseSDK.CBOR {
  public static func encode<T>(_ value: T, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where T : BlitzzCobrowseSDK.CBOREncodable
  public static func encode<T>(_ array: [T], asByteString: Swift.Bool = false, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where T : BlitzzCobrowseSDK.CBOREncodable
  public static func encode<A, B>(_ dict: [A : B], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where A : BlitzzCobrowseSDK.CBOREncodable, A : Swift.Hashable, B : BlitzzCobrowseSDK.CBOREncodable
  public static func encodeUInt8(_ x: Swift.UInt8) -> [Swift.UInt8]
  public static func encodeUInt16(_ x: Swift.UInt16) -> [Swift.UInt8]
  public static func encodeUInt32(_ x: Swift.UInt32) -> [Swift.UInt8]
  public static func encodeUInt64(_ x: Swift.UInt64) -> [Swift.UInt8]
  public static func encodeNegativeInt(_ x: Swift.Int64) -> [Swift.UInt8]
  public static func encodeByteString(_ bs: [Swift.UInt8], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public static func encodeData(_ data: Foundation.Data, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public static func encodeString(_ str: Swift.String, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public static func encodeArray<T>(_ arr: [T], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where T : BlitzzCobrowseSDK.CBOREncodable
  public static func encodeMap<A, B>(_ map: [A : B], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where A : BlitzzCobrowseSDK.CBOREncodable, A : Swift.Hashable, B : BlitzzCobrowseSDK.CBOREncodable
  public static func encodeMap<A>(_ map: [A : Any?], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) throws -> [Swift.UInt8] where A : BlitzzCobrowseSDK.CBOREncodable, A : Swift.Hashable
  public static func encodeTagged<T>(tag: BlitzzCobrowseSDK.CBOR.Tag, value: T, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where T : BlitzzCobrowseSDK.CBOREncodable
  public static func encodeSimpleValue(_ x: Swift.UInt8) -> [Swift.UInt8]
  public static func encodeNull() -> [Swift.UInt8]
  public static func encodeUndefined() -> [Swift.UInt8]
  public static func encodeBreak() -> [Swift.UInt8]
  public static func encodeFloat(_ x: Swift.Float) -> [Swift.UInt8]
  public static func encodeDouble(_ x: Swift.Double) -> [Swift.UInt8]
  public static func encodeBool(_ x: Swift.Bool) -> [Swift.UInt8]
  public static func encodeArrayStreamStart() -> [Swift.UInt8]
  public static func encodeMapStreamStart() -> [Swift.UInt8]
  public static func encodeStringStreamStart() -> [Swift.UInt8]
  public static func encodeByteStringStreamStart() -> [Swift.UInt8]
  public static func encodeStreamEnd() -> [Swift.UInt8]
  public static func encodeArrayChunk<T>(_ chunk: [T], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where T : BlitzzCobrowseSDK.CBOREncodable
  public static func encodeMapChunk<A, B>(_ map: [A : B], options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8] where A : BlitzzCobrowseSDK.CBOREncodable, A : Swift.Hashable, B : BlitzzCobrowseSDK.CBOREncodable
  public static func encodeDate(_ date: Foundation.Date, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) -> [Swift.UInt8]
  public static func encodeAny(_ any: Any?, options: BlitzzCobrowseSDK.CBOROptions = CBOROptions()) throws -> [Swift.UInt8]
}
public enum CBOREncoderError : Swift.Error {
  case invalidType
  case nonStringKeyInMap
  public static func == (a: BlitzzCobrowseSDK.CBOREncoderError, b: BlitzzCobrowseSDK.CBOREncoderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CBORInputStream {
  mutating func popByte() throws -> Swift.UInt8
  mutating func popBytes(_ n: Swift.Int) throws -> Swift.ArraySlice<Swift.UInt8>
}
public struct CBOROptions {
  public init(useStringKeys: Swift.Bool = false, dateStrategy: BlitzzCobrowseSDK.DateStrategy = .taggedAsEpochTimestamp, forbidNonStringMapKeys: Swift.Bool = false, maximumDepth: Swift.Int = .max)
}
public enum DateStrategy {
  case taggedAsEpochTimestamp
  case annotatedMap
  public static func == (a: BlitzzCobrowseSDK.DateStrategy, b: BlitzzCobrowseSDK.DateStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BlitzzCobrowseSDK.ProtocolType : Swift.Equatable {}
extension BlitzzCobrowseSDK.ProtocolType : Swift.Hashable {}
extension BlitzzCobrowseSDK.ProtocolType : Swift.RawRepresentable {}
extension BlitzzCobrowseSDK.MessageType : Swift.Equatable {}
extension BlitzzCobrowseSDK.MessageType : Swift.Hashable {}
extension BlitzzCobrowseSDK.MessageType : Swift.RawRepresentable {}
extension BlitzzCobrowseSDK.LogLevel : Swift.Equatable {}
extension BlitzzCobrowseSDK.LogLevel : Swift.Hashable {}
extension BlitzzCobrowseSDK.LogLevel : Swift.RawRepresentable {}
extension BlitzzCobrowseSDK.TransferFormat : Swift.Equatable {}
extension BlitzzCobrowseSDK.TransferFormat : Swift.Hashable {}
extension BlitzzCobrowseSDK.TransferFormat : Swift.RawRepresentable {}
extension BlitzzCobrowseSDK.CBORError : Swift.Equatable {}
extension BlitzzCobrowseSDK.CBORError : Swift.Hashable {}
extension BlitzzCobrowseSDK.CBOREncoderError : Swift.Equatable {}
extension BlitzzCobrowseSDK.CBOREncoderError : Swift.Hashable {}
extension BlitzzCobrowseSDK.DateStrategy : Swift.Equatable {}
extension BlitzzCobrowseSDK.DateStrategy : Swift.Hashable {}
